#!/usr/bin/python

import argparse
import os
from subprocess import Popen, PIPE
#Set args
parser = argparse.ArgumentParser(description='Generate fractal images with FractalRenderPy')
parser.add_argument('files', metavar='N', type=str, nargs='+', help='files to compile')
parser.add_argument('-l', metavar='N', type=str, nargs='+', help='libraries to include')
parser.add_argument('-o', default="a.o", help='Output file')
parser.add_argument('-r', action='store_true', help='Remove temp files')
args = parser.parse_args()

# our other file
import EZcompiler as compiler
import EZlogger as log

log.init()

# get sources
sources = args.files

# get libs
libs = args.l
if not libs:
    libs = []

# print files
print sources

# these are C lang files
c_files = []

for src in sources:
    c_files.append("tmp/%d.c" % (abs(hash(src))))

# loops through, compiling and saving
for i in range(0, len(sources)):
    src = sources[i]
    out = c_files[i]
    print "Transpiling %s to %s" % (src, out)
    fsrc = open(src, "r")
    # split on newline
    s_lines = fsrc.read().split("\n")
    lines = []
    read = True
    for ll in s_lines:
        # multline comments
        if ll.startswith("###"):
            read = not read
        elif read:
            #split for multistatement lines
            for lll in ll.split(";"):
                lines.append(lll)
    # close file
    fsrc.close()
    # EZC is compiled to C
    str_cmp = compiler.compile_str(lines, libs)
    # we write C file
    fout = open(out, "w+")
    fout.write(str_cmp)
    fout.close()

# Compile the intermediate lang
cmd = "cc %s -lmpfr -lm -o %s" % (" ".join(c_files), args.o)
clearcmd = "rm %s" % (" ".join(c_files))
print "Compiling C . . ."
print cmd
compile_proc = Popen(cmd, shell=True)
compile_proc.wait()
print "CC has finished"
if args.r:
    clear_proc = Popen(clearcmd, shell=True)
    clear_proc.wait()
    print "Temp files cleared"